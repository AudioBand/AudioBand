<UserControl x:Class="AudioBand.UI.AudioBandToolbar"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:audioSource="clr-namespace:AudioBand.AudioSource;assembly=AudioBand.AudioSource"
             xmlns:audioband="clr-namespace:AudioBand.UI"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:fluentWpf="clr-namespace:SourceChord.FluentWPF;assembly=FluentWPF"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:models="clr-namespace:AudioBand.Models"
             HorizontalAlignment="Stretch"
             VerticalAlignment="Stretch"
             d:DataContext="{d:DesignInstance audioband:AudioBandToolbarViewModel,
                                              IsDesignTimeCreatable=False}"
             d:DesignHeight="450"
             d:DesignWidth="800"
             Background="{Binding ViewModels.GeneralSettingsViewModel.BackgroundColor, Converter={x:Static audioband:Converters.ColorToBrush}}"
             mc:Ignorable="d"
             MouseWheel="UserControl_MouseWheel">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <audioband:SharedDictionary Source="../Resources/ToolbarButtonStyles.xaml" />
                <audioband:SharedDictionary Source="../Resources/ToolbarProgressBarStyle.xaml" />
                <audioband:SharedDictionary Source="../Resources/ToolbarContextMenuStyles.xaml" />
                <audioband:SharedDictionary Source="../Resources/TextStyles.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <DrawingImage x:Key="AlbumArtFallback">
                <DrawingImage.Drawing>
                    <DrawingGroup ClipGeometry="M0,0 V256 H256 V0 H0 Z">
                        <DrawingGroup Opacity="1">
                            <GeometryDrawing>
                                <GeometryDrawing.Pen>
                                    <Pen Brush="#ffffff"
                                         EndLineCap="Flat"
                                         LineJoin="Miter"
                                         StartLineCap="Flat"
                                         Thickness="8" />
                                </GeometryDrawing.Pen>
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry RadiusX="0"
                                                       RadiusY="0"
                                                       Rect="8,8,240,240" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <GeometryDrawing>
                                <GeometryDrawing.Pen>
                                    <Pen Brush="#ffffff"
                                         EndLineCap="Flat"
                                         LineJoin="Miter"
                                         StartLineCap="Flat"
                                         Thickness="10" />
                                </GeometryDrawing.Pen>
                                <GeometryDrawing.Geometry>
                                    <EllipseGeometry Center="128,128"
                                                     RadiusX="84"
                                                     RadiusY="84" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <GeometryDrawing Brush="#ffffff">
                                <GeometryDrawing.Geometry>
                                    <EllipseGeometry Center="128,128"
                                                     RadiusX="24"
                                                     RadiusY="24" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                        </DrawingGroup>
                    </DrawingGroup>
                </DrawingImage.Drawing>
            </DrawingImage>
            <PopupAnimation x:Key="{x:Static SystemParameters.ToolTipPopupAnimationKey}">Slide</PopupAnimation>
        </ResourceDictionary>
    </UserControl.Resources>
    <UserControl.InputBindings>
        <MouseBinding Gesture="LeftClick" Command="{Binding ViewModels.MouseBindingsViewModel.LeftClickCommand}" />
        <MouseBinding Gesture="LeftDoubleClick" Command="{Binding ViewModels.MouseBindingsViewModel.DoubleLeftClickCommand}" />
        <MouseBinding Gesture="MiddleClick" Command="{Binding ViewModels.MouseBindingsViewModel.MiddleClickCommand}" />
        <MouseBinding Gesture="MiddleDoubleClick" Command="{Binding ViewModels.MouseBindingsViewModel.DoubleMiddleClickCommand}" />
    </UserControl.InputBindings>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding LoadCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <i:Interaction.Behaviors>
        <audioband:DpiScaling />
    </i:Interaction.Behaviors>
    <UserControl.ContextMenu>
        <fluentWpf:AcrylicContextMenu Style="{StaticResource ToolbarContextMenu}">
            <i:Interaction.Behaviors>
                <audioband:DpiScaling />
            </i:Interaction.Behaviors>
            <ContextMenu.Resources>
                <Style BasedOn="{StaticResource ToolbarContextMenuItem}" TargetType="{x:Type MenuItem}" />
            </ContextMenu.Resources>
            <MenuItem Command="{Binding ShowSettingsWindowCommand}"
                      Header="AudioBand Settings"
                      Style="{StaticResource ToolbarContextMenuItem}">
                <MenuItem.Icon>
                    <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE713;" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="Audio sources"
                      ItemsSource="{Binding AudioSources}"
                      Style="{StaticResource ToolbarContextMenuItem}">
                <MenuItem.Icon>
                    <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE8D6;" />
                </MenuItem.Icon>
                <MenuItem.ItemTemplate>
                    <DataTemplate DataType="{x:Type audioSource:IAudioSource}">
                        <TextBlock Text="{Binding Name}" />
                    </DataTemplate>
                </MenuItem.ItemTemplate>
                <MenuItem.ItemContainerStyle>
                    <Style BasedOn="{StaticResource ToolbarContextMenuItem}" TargetType="{x:Type MenuItem}">
                        <Setter Property="Command" Value="{Binding PlacementTarget.DataContext.SelectAudioSourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                        <Setter Property="CommandParameter" Value="{Binding}" />
                        <Style.Triggers>
                            <DataTrigger Value="True">
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{x:Static audioband:MultiConverters.Comparison}">
                                        <Binding Path="Name" />
                                        <Binding Path="PlacementTarget.DataContext.SelectedAudioSource.Name" RelativeSource="{RelativeSource AncestorType={x:Type ContextMenu}}" />
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                <Setter Property="Icon">
                                    <Setter.Value>
                                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE73E;" />
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
            <MenuItem Header="Profiles"
                      ItemsSource="{Binding Profiles}"
                      Style="{StaticResource ToolbarContextMenuItem}">
                <MenuItem.Icon>
                    <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE771;" />
                </MenuItem.Icon>
                <MenuItem.ItemTemplate>
                    <DataTemplate DataType="{x:Type models:UserProfile}">
                        <TextBlock Text="{Binding Name}" />
                    </DataTemplate>
                </MenuItem.ItemTemplate>
                <MenuItem.ItemContainerStyle>
                    <Style BasedOn="{StaticResource ToolbarContextMenuItem}" TargetType="{x:Type MenuItem}">
                        <Setter Property="Command" Value="{Binding PlacementTarget.DataContext.SelectProfileCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                        <Setter Property="CommandParameter" Value="{Binding Name}" />
                        <Style.Triggers>
                            <DataTrigger Value="True">
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{x:Static audioband:MultiConverters.Comparison}">
                                        <Binding Path="Name" />
                                        <Binding Path="PlacementTarget.DataContext.SelectedProfile.Name" RelativeSource="{RelativeSource AncestorType={x:Type ContextMenu}}" />
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                <Setter Property="Icon">
                                    <Setter.Value>
                                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE73E;" />
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
        </fluentWpf:AcrylicContextMenu>
    </UserControl.ContextMenu>
    <Canvas Name="Toolbar" Width="{Binding ViewModels.GeneralSettingsViewModel.Width}" Height="{Binding ViewModels.GeneralSettingsViewModel.Height}">
        <Canvas.RenderTransform>
            <RotateTransform CenterX="0" CenterY="0" Angle="0" />
        </Canvas.RenderTransform>
        <Canvas.Resources>
            <audioband:BindingProxy x:Key="DataContextProxy" Value="{Binding .}" />
        </Canvas.Resources>
        <Border x:Name="AlbumArt"
                 Width="{Binding Width}"
                 Height="{Binding Height}"
                 audioband:CanvasPositioning.Anchor="{Binding Anchor}"
                 audioband:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                 audioband:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                 DataContext="{Binding ViewModels.AlbumArtViewModel}"
                 RenderOptions.BitmapScalingMode="Fant"
                 ToolTipService.HasDropShadow="True"
                 ToolTipService.InitialShowDelay="500"
                 ToolTipService.ShowDuration="999999"
                 Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}"
                 CornerRadius="{Binding CornerRadius}">
            <Border.Style>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="Background">
                        <Setter.Value>
                            <ImageBrush ImageSource="{Binding AlbumArt, FallbackValue={StaticResource AlbumArtFallback}}" />
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding AlbumArt}" Value="{x:Null}">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <ImageBrush ImageSource="{Binding PlaceholderPath, Converter={x:Static audioband:Converters.PathToImageSource}, TargetNullValue={StaticResource AlbumArtFallback}, FallbackValue={StaticResource AlbumArtFallback}}" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <Border.ToolTip>
                <ToolTip x:Name="AlbumArtTooltip"
                         Padding="0"
                         Background="Black"
                         BorderThickness="0"
                         DataContext="{Binding Source={StaticResource DataContextProxy}, Path=Value.ViewModels.AlbumArtPopupViewModel}"
                         HasDropShadow="True"
                         HorizontalOffset="{Binding XPosition}"
                         Placement="RelativePoint"
                         PlacementTarget="{Binding ElementName=AlbumArt}"
                         VerticalOffset="{Binding Margin}">
                    <i:Interaction.Behaviors>
                        <audioband:DpiScaling />
                    </i:Interaction.Behaviors>
                    <Viewbox Width="{Binding Width}"
                             Height="{Binding Height}"
                             RenderOptions.BitmapScalingMode="Fant"
                             Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}">
                        <Image DataContext="{Binding Source={StaticResource DataContextProxy}, Path=Value.ViewModels.AlbumArtViewModel}">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Setter Property="Source" Value="{Binding AlbumArt, FallbackValue={StaticResource AlbumArtFallback}}" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding AlbumArt}" Value="{x:Null}">
                                            <Setter Property="Source" Value="{Binding PlaceholderPath, Converter={x:Static audioband:Converters.PathToImageSource}, FallbackValue={StaticResource AlbumArtFallback}, TargetNullValue={StaticResource AlbumArtFallback}}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                    </Viewbox>
                    <ToolTip.Style>
                        <Style TargetType="{x:Type ToolTip}">
                            <Setter Property="Opacity" Value="1" />
                            <Style.Triggers>
                                <EventTrigger RoutedEvent="Opened">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                             From="0"
                                                             To="1"
                                                             Duration="0:0:0.3" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToolTip.Style>
                </ToolTip>
            </Border.ToolTip>
        </Border>
        <ItemsControl x:Name="CustomLabels"
                      Width="{Binding ViewModels.GeneralSettingsViewModel.Width}"
                      Height="{Binding ViewModels.GeneralSettingsViewModel.Height}"
                      ItemsSource="{Binding ViewModels.CustomLabelsViewModel.CustomLabels}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemContainerStyle>
                <Style TargetType="ContentPresenter">
                    <Setter Property="audioband:CanvasPositioning.Anchor" Value="{Binding Anchor}" />
                    <Setter Property="audioband:CanvasPositioning.AnchorXDistance" Value="{Binding XPosition}" />
                    <Setter Property="audioband:CanvasPositioning.AnchorYDistance" Value="{Binding YPosition}" />
                </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type audioband:CustomLabelViewModel}">
                    <Canvas Width="{Binding Width}"
                            Height="{Binding Height}"
                            Background="Transparent"
                            ClipToBounds="True">
                            <i:Interaction.Behaviors>
                                <audioband:MarqueeContainer IsPlaying="{Binding IsPlaying}"
                                                        ScrollBehavior="{Binding ScrollBehavior}"
                                                        ScrollDuration="{Binding ScrollSpeed}"
                                                        TargetChild="{Binding ElementName=TextBlock1}"
                                                        TargetCopy="{Binding ElementName=TextBlockCopy}"
                                                        TextOverflow="{Binding TextOverflow}" />
                            </i:Interaction.Behaviors>
                            <Border Width="{Binding Width}" Height="{Binding Height}"
                                BorderBrush="{Binding BorderColor, Converter={x:Static audioband:Converters.ColorToBrush}}"
                                BorderThickness="{Binding BorderThickness}"
                                CornerRadius="{Binding BorderCornerRadius}">
                            </Border>
                            <TextBlock x:Name="TextBlock1"
                                   MinWidth="{Binding Width}"
                                   MinHeight="{Binding Height}"
                                   VerticalAlignment="Center"
                                   audioband:TextBlockTextSegments.TextSegments="{Binding TextSegments}"
                                   FontFamily="{Binding FontFamily}"
                                   FontSize="{Binding FontSize}"
                                   Foreground="{Binding Color, Converter={x:Static audioband:Converters.ColorToBrush}}"
                                   TextAlignment="{Binding TextAlignment, Converter={x:Static audioband:Converters.TextAlignment}}"
                                   TextTrimming="None"
                                   TextWrapping="NoWrap"
                                   Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}" />
                            <TextBlock x:Name="TextBlockCopy"
                                   MinWidth="{Binding Width}"
                                   MinHeight="{Binding Height}"
                                   VerticalAlignment="Center"
                                   audioband:TextBlockTextSegments.TextSegments="{Binding TextSegments}"
                                   FontFamily="{Binding FontFamily}"
                                   FontSize="{Binding FontSize}"
                                   Foreground="{Binding Color, Converter={x:Static audioband:Converters.ColorToBrush}}"
                                   Opacity="0"
                                   TextAlignment="{Binding TextAlignment, Converter={x:Static audioband:Converters.TextAlignment}}"
                                   TextTrimming="None"
                                   TextWrapping="NoWrap"
                                   Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}" />
                            <Canvas.Style>
                                <Style TargetType="{x:Type Canvas}">
                                    <Style.Resources>
                                        <LinearGradientBrush x:Key="Mask" MappingMode="Absolute" StartPoint="0,0">
                                            <!--  Use mapping mode absolute because relative mode is relative to the child text instead of the canvas  -->
                                            <LinearGradientBrush.EndPoint>
                                                <MultiBinding Converter="{x:Static audioband:MultiConverters.Point}">
                                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" />
                                                    <Binding>
                                                        <Binding.Source>0.0</Binding.Source>
                                                    </Binding>
                                                </MultiBinding>
                                            </LinearGradientBrush.EndPoint>
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStop Offset="0" Color="Transparent" />
                                                <GradientStop Offset="{Binding LeftFadeOffset}" Color="Black" />
                                                <GradientStop Offset="{Binding RightFadeOffset}" Color="Black" />
                                                <GradientStop Offset="1" Color="Transparent" />
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Style.Resources>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding FadeEffect}" Value="{x:Static models:TextFadeEffect.Always}">
                                            <Setter Property="OpacityMask" Value="{StaticResource Mask}" />
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding FadeEffect}" Value="{x:Static models:TextFadeEffect.OnlyWhenScrolling}" />
                                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(audioband:MarqueeContainer.IsScrolling)}" Value="True" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="OpacityMask" Value="{StaticResource Mask}" />
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Canvas.Style>
                        </Canvas>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
        <Button x:Name="PlayPauseButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                audioband:CanvasPositioning.Anchor="{Binding Anchor}"
                audioband:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                audioband:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding PlayPauseTrackCommand}"
                DataContext="{Binding ViewModels.PlayPauseButtonViewModel}"
                Style="{StaticResource ToolbarPlayPauseButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}" />
        <Button x:Name="NextButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                audioband:CanvasPositioning.Anchor="{Binding Anchor}"
                audioband:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                audioband:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding NextTrackCommand}"
                DataContext="{Binding ViewModels.NextButtonViewModel}"
                Style="{StaticResource ToolbarNextButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}" />
        <Button x:Name="PreviousButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                audioband:CanvasPositioning.Anchor="{Binding Anchor}"
                audioband:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                audioband:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding PreviousTrackCommand}"
                DataContext="{Binding ViewModels.PreviousButtonViewModel}"
                Style="{StaticResource ToolbarPreviousButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}" />
        <Button x:Name="RepeatModeButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                audioband:CanvasPositioning.Anchor="{Binding Anchor}"
                audioband:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                audioband:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding CycleRepeatModeCommand}"
                DataContext="{Binding ViewModels.RepeatModeButtonViewModel}"
                Style="{StaticResource ToolbarRepeatModeButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}" />
        <Button x:Name="ShuffleModeButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                audioband:CanvasPositioning.Anchor="{Binding Anchor}"
                audioband:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                audioband:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding ToggleShuffleCommand}"
                DataContext="{Binding ViewModels.ShuffleModeButtonViewModel}"
                Style="{StaticResource ToolbarShuffleModeButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}" />
        <Button x:Name="LikeButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                audioband:CanvasPositioning.Anchor="{Binding Anchor}"
                audioband:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                audioband:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding LikeTrackCommand}"
                DataContext="{Binding ViewModels.LikeButtonViewModel}"
                Style="{StaticResource ToolbarLikeButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}" />
        <Button x:Name="VolumeButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                audioband:CanvasPositioning.Anchor="{Binding Anchor}"
                audioband:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                audioband:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding VolumePopupCommand}"
                DataContext="{Binding ViewModels.VolumeButtonViewModel}"
                Style="{StaticResource ToolbarVolumeButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}">
        </Button>
        <fluentWpf:AcrylicPopup
                x:Name="VolumePopup"
                PopupAnimation="Fade"
                Placement="Top"
                Width="{Binding PopupWidth}"
                Height="{Binding PopupHeight}"
                IsOpen="{Binding IsVolumePopupOpen}"
                PlacementTarget="{Binding ElementName=VolumeButton}"
                DataContext="{Binding ViewModels.VolumeButtonViewModel}"
                HorizontalOffset="{Binding XPopupOffset}"
                VerticalOffset="{Binding YPopupOffset}"
                Style="{StaticResource VolumePopupStyle}"
                MouseWheel="VolumePopup_MouseWheel"
                StaysOpen="False">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseLeave">
                    <i:InvokeCommandAction Command="{Binding MouseLeftCommand}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Border Background="{Binding PopupBackgroundColor, Converter={x:Static audioband:Converters.ColorToNonTransparentBrush}}">
                <!-- Using style here so DataBindings work on the Gradients -->
                <Slider x:Name="VolumeSlider"
                        HorizontalAlignment="Center"
                        Orientation="Vertical"
                        Minimum="0"
                        Maximum="100"
                        Padding="5,5,0,0"
                        TickFrequency="1"
                        TickPlacement="None"
                        IsSnapToTickEnabled="True"
                        Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}"
                        Value="{Binding Volume, Mode=TwoWay}">
                    <i:Interaction.Behaviors>
                        <audioband:SliderClickAndDrag />
                        <audioband:SliderToolTipBehavior Prefix="" Type="Volume" />
                    </i:Interaction.Behaviors>
                    <Slider.Style>
                        <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource VolumeSliderStyle}">
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <LinearGradientBrush>
                                        <GradientStop Color="{Binding VolumeBarForegroundColor}" Offset="0" />
                                        <GradientStop Color="{Binding VolumeBarForegroundGradientColor}" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Slider.Style>
                </Slider>
            </Border>
        </fluentWpf:AcrylicPopup>
        <!-- Using style here so DataBindings work on the Gradients -->
        <Slider x:Name="ProgressBar"
                Width="{Binding Width}"
                Height="{Binding Height}"
                audioband:CanvasPositioning.Anchor="{Binding Anchor}"
                audioband:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                audioband:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                DataContext="{Binding ViewModels.ProgressBarViewModel}"
                Maximum="{Binding TrackLength, Converter={x:Static audioband:Converters.TimeSpanToMs}, Mode=OneWay}"
                Minimum="0"
                Visibility="{Binding IsVisible, Converter={x:Static audioband:Converters.BoolToVisibility}}">
            <i:Interaction.Behaviors>
                <audioband:SliderThrottle FinalValue="{Binding TrackProgress, Converter={x:Static audioband:Converters.TimeSpanToMs}, Mode=TwoWay}" />
                <audioband:SliderClickAndDrag />
                <audioband:SliderToolTipBehavior Prefix="" Type="ProgressBar" />
            </i:Interaction.Behaviors>
            <Slider.Style>
                <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource ProgressBarStyle}">
                    <Setter Property="Foreground">
                        <Setter.Value>
                            <LinearGradientBrush>
                                <GradientStop Color="{Binding ForegroundColor}" Offset="0" />
                                <GradientStop Color="{Binding ForegroundGradientColor}" Offset="1" />
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Slider.Style>
        </Slider>
        <Popup  x:Name="InformationPopup"
                Placement="Top"
                IsOpen="{Binding IsInformationPopupOpen}"
                PlacementTarget="{Binding ElementName=Toolbar}"
                DataContext="{Binding ViewModels.PopupViewModel}"
                PopupAnimation="Fade"
                AllowsTransparency="True" >
            <StackPanel Background="{audioband:ThemeResource SystemAccentColor}" Opacity="0.95">
                <Grid Margin="5" Background="{audioband:ThemeResource SystemAltHighColor}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid Background="{audioband:ThemeResource SystemAccentColor}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Text="{Binding Title}" FontSize="18" Margin="8,3,0,5"
                                   Style="{StaticResource TitleTextBlock}" />
                        <Button Grid.Column="1" Command="{Binding CloseCommand}" Width="15" Height="15"
                                HorizontalAlignment="Right" VerticalAlignment="Top" Padding="0,5,5,0"
                                Template="{StaticResource ToolbarButtonControlTemplate}" Content="x" />
                    </Grid>
                    <TextBlock MaxWidth="300" Grid.Row="1" Margin="5" Style="{StaticResource DescriptionTextBlock}"
                               Text="{Binding Description}" TextWrapping="Wrap" Foreground="{audioband:ThemeResource SystemBaseHighColor}" />
                </Grid>
            </StackPanel>
        </Popup>
    </Canvas>
</UserControl>
